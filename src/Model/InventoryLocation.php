<?php
/**
 * InventoryLocation
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  ld\php\sdkEbayInventory
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Inventory API
 *
 * The Inventory API is used to create and manage inventory, and then to publish and manage this inventory on an eBay marketplace. There are also methods in this API that will convert eligible, active eBay listings into the Inventory API model.
 *
 * The version of the OpenAPI document: 1.14.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ld\php\sdkEbayInventory\Model;

use \ArrayAccess;
use \ld\php\sdkEbayInventory\ObjectSerializer;

/**
 * InventoryLocation Class Doc Comment
 *
 * @category Class
 * @description This type is used by the &lt;strong&gt;updateInventoryLocation&lt;/strong&gt; call to update operating hours, special hours, phone number, and other minor details of an inventory location.
 * @package  ld\php\sdkEbayInventory
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class InventoryLocation implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'InventoryLocation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'locationAdditionalInformation' => 'string',
        'locationInstructions' => 'string',
        'locationWebUrl' => 'string',
        'name' => 'string',
        'operatingHours' => '\ld\php\sdkEbayInventory\Model\OperatingHours[]',
        'phone' => 'string',
        'specialHours' => '\ld\php\sdkEbayInventory\Model\SpecialHours[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'locationAdditionalInformation' => null,
        'locationInstructions' => null,
        'locationWebUrl' => null,
        'name' => null,
        'operatingHours' => null,
        'phone' => null,
        'specialHours' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'locationAdditionalInformation' => 'locationAdditionalInformation',
        'locationInstructions' => 'locationInstructions',
        'locationWebUrl' => 'locationWebUrl',
        'name' => 'name',
        'operatingHours' => 'operatingHours',
        'phone' => 'phone',
        'specialHours' => 'specialHours'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'locationAdditionalInformation' => 'setLocationAdditionalInformation',
        'locationInstructions' => 'setLocationInstructions',
        'locationWebUrl' => 'setLocationWebUrl',
        'name' => 'setName',
        'operatingHours' => 'setOperatingHours',
        'phone' => 'setPhone',
        'specialHours' => 'setSpecialHours'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'locationAdditionalInformation' => 'getLocationAdditionalInformation',
        'locationInstructions' => 'getLocationInstructions',
        'locationWebUrl' => 'getLocationWebUrl',
        'name' => 'getName',
        'operatingHours' => 'getOperatingHours',
        'phone' => 'getPhone',
        'specialHours' => 'getSpecialHours'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['locationAdditionalInformation'] = $data['locationAdditionalInformation'] ?? null;
        $this->container['locationInstructions'] = $data['locationInstructions'] ?? null;
        $this->container['locationWebUrl'] = $data['locationWebUrl'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['operatingHours'] = $data['operatingHours'] ?? null;
        $this->container['phone'] = $data['phone'] ?? null;
        $this->container['specialHours'] = $data['specialHours'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets locationAdditionalInformation
     *
     * @return string|null
     */
    public function getLocationAdditionalInformation()
    {
        return $this->container['locationAdditionalInformation'];
    }

    /**
     * Sets locationAdditionalInformation
     *
     * @param string|null $locationAdditionalInformation This text field is used by the merchant to provide/update additional information about an inventory location. Whatever text is passed in this field will replace the current text string defined for this field. If the text will not change, the same text should be passed in once again. <br><br><b>Max length</b>: 256
     *
     * @return self
     */
    public function setLocationAdditionalInformation($locationAdditionalInformation)
    {
        $this->container['locationAdditionalInformation'] = $locationAdditionalInformation;

        return $this;
    }

    /**
     * Gets locationInstructions
     *
     * @return string|null
     */
    public function getLocationInstructions()
    {
        return $this->container['locationInstructions'];
    }

    /**
     * Sets locationInstructions
     *
     * @param string|null $locationInstructions This text field is generally used by the merchant to provide/update special pickup instructions for a store inventory location. Although this field is optional, it is recommended that merchants provide this field to create a pleasant and easy pickup experience for In-Store Pickup and Click and Collect orders. If this field is not included in the call request payload, eBay will use the default pickup instructions contained in the merchant's profile (if available). Whatever text is passed in this field will replace the current text string defined for this field. If the text will not change, the same text should be passed in once again. <br><br><b>Max length</b>: 1000
     *
     * @return self
     */
    public function setLocationInstructions($locationInstructions)
    {
        $this->container['locationInstructions'] = $locationInstructions;

        return $this;
    }

    /**
     * Gets locationWebUrl
     *
     * @return string|null
     */
    public function getLocationWebUrl()
    {
        return $this->container['locationWebUrl'];
    }

    /**
     * Sets locationWebUrl
     *
     * @param string|null $locationWebUrl This text field is used by the merchant to provide/update the Website address (URL) associated with the inventory location. The URL that is passed in this field will replace any other URL that may be defined for this field. <br><br><b>Max length</b>: 512
     *
     * @return self
     */
    public function setLocationWebUrl($locationWebUrl)
    {
        $this->container['locationWebUrl'] = $locationWebUrl;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name This text field is used by the merchant to update the name of the inventory location. This name should be a human-friendly name as it will be in In-Store Pickup and Click and Collect listings. A name is not required for warehouse inventory locations. For store inventory locations, this field is not immediately required, but will be required before an offer enabled with the In-Store Pickup or Click and Collect capability can be published. So, if the seller omitted this field in the <strong>createInventoryLocation</strong> call, it is required for an <strong>updateInventoryLocation</strong> call. The name that is passed in this field will replace any other name that may be defined for this field.
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets operatingHours
     *
     * @return \ld\php\sdkEbayInventory\Model\OperatingHours[]|null
     */
    public function getOperatingHours()
    {
        return $this->container['operatingHours'];
    }

    /**
     * Sets operatingHours
     *
     * @param \ld\php\sdkEbayInventory\Model\OperatingHours[]|null $operatingHours This container is used to provide/update the regular operating hours for a store location during the days of the week. A <strong>dayOfWeekEnum</strong> field and an <strong>intervals</strong> container will be needed for each day of the week that the store location is open. Note that if operating hours are already set for an inventory location for a specific day of the week, whatever is set through an <strong>updateInventoryLocation</strong> call will override those existing hours.
     *
     * @return self
     */
    public function setOperatingHours($operatingHours)
    {
        $this->container['operatingHours'] = $operatingHours;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string|null
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string|null $phone This text field is used by the merchant to provide/update the phone number for the inventory location. The phone number that is passed in this field will replace any other phone number that may be defined for this field. <br><br><b>Max length</b>: 36
     *
     * @return self
     */
    public function setPhone($phone)
    {
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets specialHours
     *
     * @return \ld\php\sdkEbayInventory\Model\SpecialHours[]|null
     */
    public function getSpecialHours()
    {
        return $this->container['specialHours'];
    }

    /**
     * Sets specialHours
     *
     * @param \ld\php\sdkEbayInventory\Model\SpecialHours[]|null $specialHours This container is used to provide/update the special operating hours for a store location on a specific date, such as a holiday. The special hours specified for the specific date will override the normal operating hours for that particular day of the week. If special hours have already been set up for an inventory location, specifying special hours through an <strong>updateInventoryLocation</strong> call will only add to the list, unless the date(s) used are the same special date(s) already set up, in which case, the special hours set up through the <strong>updateInventoryLocation</strong> call will override the existing special hours.
     *
     * @return self
     */
    public function setSpecialHours($specialHours)
    {
        $this->container['specialHours'] = $specialHours;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


